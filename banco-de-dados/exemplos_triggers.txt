--Exemplos de triggers
-- gatilho para gerenciar backup online	
	CREATE TABLE ALUNOBKP
	AS SELECT * FROM ALUNO;


	CREATE OR REPLACE TRIGGER ALUNOBKP
	AFTER INSERT OR UPDATE OR DELETE ON ALUNO
	FOR EACH ROW
	BEGIN
	IF INSERTING THEN
		INSERT INTO ALUNOBKP(ID_ALUNO, NOM_ALUNO, DTN_ALUNO) 
		VALUES (:NEW.ID_ALUNO, :NEW.NOM_ALUNO, :NEW.DTN_ALUNO);
	ELSIF UPDATING THEN
		UPDATE ALUNOBKP SET ID_ALUNO = :NEW.ID_ALUNO, NOM_ALUNO = :NEW.NOM_ALUNO, DTN_ALUNO = :NEW.DTN_ALUNO
		WHERE ID_ALUNO = :OLD.ID_ALUNO;
	ELSE
		DELETE ALUNOBKP WHERE ID_ALUNO = :OLD.ID_ALUNO;
	END IF;
	END;
	/


-- Identificar quais possíveis erros quando o gatilho é criado com erros de compilação
SHOW ERRORS 


INSERT INTO ALUNO VALUES (41, 'Edilson Caritá', TO_DATE('10/07/1978','DD/MM/YYYY'));
-- quando inserir, já vai para o bkp automaticamente

UPDATE ALUNO SET NOM_ALUNO = 'José da Silva' WHERE ID_ALUNO = 9;

DELETE ALUNO WHERE ID_ALUNO = 3;

SELECT * FROM ALUNO ORDER BY ID_ALUNO;
SELECT * FROM ALUNOBKP ORDER BY ID_ALUNO;



-- Gatilho para gerenciar auditoria na tabela ALUNO
	CREATE TABLE AUDITORIA_ALUNO(
	ID_AUDITORIA_ALUNO NUMBER(5),
	N_ID_ALUNO NUMBER(5), 
	N_NOM_ALUNO VARCHAR (40),
	N_DTN_ALUNO DATE, 
	V_ID_ALUNO NUMBER(5),
	V_NOM_ALUNO VARCHAR(40),
	V_DTN_ALUNO DATE, 
	CONSTRAINT PK_AUDITORIA_ALUNO PRIMARY KEY (ID_AUDITORIA_ALUNO)
	);


	CREATE SEQUENCE ID_AUDITORIA_ALUNO
	START WITH 1
	INCREMENT BY 1;


	CREATE OR REPLACE TRIGGER AUDIT_ALUNO
	AFTER INSERT OR UPDATE OR DELETE ON ALUNO
	FOR EACH ROW
	BEGIN
	INSERT INTO AUDITORIA_ALUNO 
	VALUES(ID_AUDITORIA_ALUNO.NEXTVAL, :NEW.ID_ALUNO, :NEW.NOM_ALUNO, :NEW.DTN_ALUNO, :OLD.ID_ALUNO, :OLD.NOM_ALUNO, :OLD.DTN_ALUNO);
	END;
	/

	INSERT INTO ALUNO(ID_ALUNO, NOM_ALUNO, DTN_ALUNO) VALUES (42, 'Maria Joaquina', TO_DATE ('10/10/1980','DD/MM/YYYY'));

	UPDATE ALUNO SET NOM_ALUNO = 'Maria Joaquina da Silva' WHERE ID_ALUNO = 42;


INSERT INTO ALUNO(ID_ALUNO, NOM_ALUNO, DTN_ALUNO) VALUES (43, 'Joaquin dos Santos', TO_DATE ('09/12/1999','DD/MM/YYYY'));

DELETE FROM ALUNO WHERE ID_ALUNO = 43;


-- Gatilho para registrar o conceito a partir de uma nota 
	CREATE TABLE CONCURSO
	(NUM_CONCURSO NUMBER(4),
	NUM_INSCRITO NUMBER(5),
	NOT_CONCURSO NUMBER(3,1),
	RES_CONCURSO VARCHAR2(10),
	CONSTRAINT PK_CONCURSO PRIMARY KEY (NUM_CONCURSO, NUM_INSCRITO)
	);

-- Regra de negócio
-- Para estar aprovado o candidato precisa ter nota >= 7

	CREATE OR REPLACE TRIGGER RES_CONCURSO
	BEFORE INSERT OR UPDATE ON CONCURSO
	FOR EACH ROW
	BEGIN
	IF(:NEW.NOT_CONCURSO >= 7) THEN
		:NEW.RES_CONCURSO := 'APROVADO';
	ELSE
		:NEW.RES_CONCURSO := 'REPROVADO';
	END IF;
	END;
	/


INSERT INTO CONCURSO (NUM_CONCURSO, NUM_INSCRITO, NOT_CONCURSO) VALUES (1, 1, 1);
INSERT INTO CONCURSO (NUM_CONCURSO, NUM_INSCRITO, NOT_CONCURSO) VALUES (1, 2, 7);
INSERT INTO CONCURSO (NUM_CONCURSO, NUM_INSCRITO, NOT_CONCURSO, RES_CONCURSO) VALUES (1, 3, 3, 'APROVADO'); -- mesmo forçando aprovado, a ordem de execução do gatilho aplica a regra e deixa como REPROVADO